//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.DotStarK;

[assembly: RegisterDocumentType(Badge.CLASS_NAME, typeof(Badge))]

namespace CMS.DocumentEngine.Types.DotStarK
{
	/// <summary>
	/// Represents a content item of type Badge.
	/// </summary>
	public partial class Badge : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "DotStarK.Badge";


		/// <summary>
		/// The instance of the class that provides extended API for working with Badge fields.
		/// </summary>
		private readonly BadgeFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// BadgeID.
		/// </summary>
		[DatabaseIDField]
		public int BadgeID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("BadgeID"), 0);
			}
			set
			{
				SetValue("BadgeID", value);
			}
		}


		/// <summary>
		/// badge alternative text.
		/// </summary>
		[DatabaseField]
		public string BadgeAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("BadgeAltText"), @"");
			}
			set
			{
				SetValue("BadgeAltText", value);
			}
		}


		/// <summary>
		/// badge image.
		/// </summary>
		[DatabaseField]
		public string BadgeImage
		{
			get
			{
				return ValidationHelper.GetString(GetValue("BadgeImage"), @"");
			}
			set
			{
				SetValue("BadgeImage", value);
			}
		}


		/// <summary>
		/// Badge title.
		/// </summary>
		[DatabaseField]
		public string BadgeTitle
		{
			get
			{
				return ValidationHelper.GetString(GetValue("BadgeTitle"), @"");
			}
			set
			{
				SetValue("BadgeTitle", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Badge fields.
		/// </summary>
		[RegisterProperty]
		public BadgeFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Badge fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class BadgeFields : AbstractHierarchicalObject<BadgeFields>
		{
			/// <summary>
			/// The content item of type Badge that is a target of the extended API.
			/// </summary>
			private readonly Badge mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="BadgeFields" /> class with the specified content item of type Badge.
			/// </summary>
			/// <param name="instance">The content item of type Badge that is a target of the extended API.</param>
			public BadgeFields(Badge instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// BadgeID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.BadgeID;
				}
				set
				{
					mInstance.BadgeID = value;
				}
			}


			/// <summary>
			/// badge alternative text.
			/// </summary>
			public string AltText
			{
				get
				{
					return mInstance.BadgeAltText;
				}
				set
				{
					mInstance.BadgeAltText = value;
				}
			}


			/// <summary>
			/// badge image.
			/// </summary>
			public string Image
			{
				get
				{
					return mInstance.BadgeImage;
				}
				set
				{
					mInstance.BadgeImage = value;
				}
			}


			/// <summary>
			/// Badge title.
			/// </summary>
			public string Title
			{
				get
				{
					return mInstance.BadgeTitle;
				}
				set
				{
					mInstance.BadgeTitle = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Badge" /> class.
		/// </summary>
		public Badge() : base(CLASS_NAME)
		{
			mFields = new BadgeFields(this);
		}

		#endregion
	}
}