//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.DotStarK;

[assembly: RegisterDocumentType(Process.CLASS_NAME, typeof(Process))]

namespace CMS.DocumentEngine.Types.DotStarK
{
	/// <summary>
	/// Represents a content item of type Process.
	/// </summary>
	public partial class Process : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "DotStarK.Process";


		/// <summary>
		/// The instance of the class that provides extended API for working with Process fields.
		/// </summary>
		private readonly ProcessFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// ProcessID.
		/// </summary>
		[DatabaseIDField]
		public int ProcessID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("ProcessID"), 0);
			}
			set
			{
				SetValue("ProcessID", value);
			}
		}


		/// <summary>
		/// Process Image Name.
		/// </summary>
		[DatabaseField]
		public string Name
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Name"), @"How we work");
			}
			set
			{
				SetValue("Name", value);
			}
		}


		/// <summary>
		/// Process Title.
		/// </summary>
		[DatabaseField]
		public string Title
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Title"), @"");
			}
			set
			{
				SetValue("Title", value);
			}
		}


		/// <summary>
		/// Process content text .
		/// </summary>
		[DatabaseField]
		public string ContentText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ContentText"), @"");
			}
			set
			{
				SetValue("ContentText", value);
			}
		}


		/// <summary>
		/// Process image URL.
		/// </summary>
		[DatabaseField]
		public string ImageURL
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageURL"), @"");
			}
			set
			{
				SetValue("ImageURL", value);
			}
		}


		/// <summary>
		/// Active.
		/// </summary>
		[DatabaseField]
		public bool IsActive
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("IsActive"), true);
			}
			set
			{
				SetValue("IsActive", value);
			}
		}


		/// <summary>
		/// Process image alternative text.
		/// </summary>
		[DatabaseField]
		public string ImageAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageAltText"), @"");
			}
			set
			{
				SetValue("ImageAltText", value);
			}
		}


		/// <summary>
		/// Process image hover text.
		/// </summary>
		[DatabaseField]
		public string ImageHoverText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageHoverText"), @"");
			}
			set
			{
				SetValue("ImageHoverText", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Process fields.
		/// </summary>
		[RegisterProperty]
		public ProcessFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Process fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class ProcessFields : AbstractHierarchicalObject<ProcessFields>
		{
			/// <summary>
			/// The content item of type Process that is a target of the extended API.
			/// </summary>
			private readonly Process mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="ProcessFields" /> class with the specified content item of type Process.
			/// </summary>
			/// <param name="instance">The content item of type Process that is a target of the extended API.</param>
			public ProcessFields(Process instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// ProcessID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.ProcessID;
				}
				set
				{
					mInstance.ProcessID = value;
				}
			}


			/// <summary>
			/// Process Image Name.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.Name;
				}
				set
				{
					mInstance.Name = value;
				}
			}


			/// <summary>
			/// Process Title.
			/// </summary>
			public string Title
			{
				get
				{
					return mInstance.Title;
				}
				set
				{
					mInstance.Title = value;
				}
			}


			/// <summary>
			/// Process content text .
			/// </summary>
			public string ContentText
			{
				get
				{
					return mInstance.ContentText;
				}
				set
				{
					mInstance.ContentText = value;
				}
			}


			/// <summary>
			/// Process image URL.
			/// </summary>
			public string ImageURL
			{
				get
				{
					return mInstance.ImageURL;
				}
				set
				{
					mInstance.ImageURL = value;
				}
			}


			/// <summary>
			/// Active.
			/// </summary>
			public bool IsActive
			{
				get
				{
					return mInstance.IsActive;
				}
				set
				{
					mInstance.IsActive = value;
				}
			}


			/// <summary>
			/// Process image alternative text.
			/// </summary>
			public string ImageAltText
			{
				get
				{
					return mInstance.ImageAltText;
				}
				set
				{
					mInstance.ImageAltText = value;
				}
			}


			/// <summary>
			/// Process image hover text.
			/// </summary>
			public string ImageHoverText
			{
				get
				{
					return mInstance.ImageHoverText;
				}
				set
				{
					mInstance.ImageHoverText = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Process" /> class.
		/// </summary>
		public Process() : base(CLASS_NAME)
		{
			mFields = new ProcessFields(this);
		}

		#endregion
	}
}