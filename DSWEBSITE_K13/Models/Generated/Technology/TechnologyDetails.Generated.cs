//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.DotStarK;

[assembly: RegisterDocumentType(TechnologyDetails.CLASS_NAME, typeof(TechnologyDetails))]

namespace CMS.DocumentEngine.Types.DotStarK
{
	/// <summary>
	/// Represents a content item of type TechnologyDetails.
	/// </summary>
	public partial class TechnologyDetails : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "DotStarK.TechnologyDetails";


		/// <summary>
		/// The instance of the class that provides extended API for working with TechnologyDetails fields.
		/// </summary>
		private readonly TechnologyDetailsFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// Technologies_DSID.
		/// </summary>
		[DatabaseIDField]
		public int TechnologyDetailsID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("TechnologyDetailsID"), 0);
			}
			set
			{
				SetValue("TechnologyDetailsID", value);
			}
		}


		/// <summary>
		/// Technology title.
		/// </summary>
		[DatabaseField]
		public string TechnologyTitle
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyTitle"), @"");
			}
			set
			{
				SetValue("TechnologyTitle", value);
			}
		}


		/// <summary>
		/// Please enter same name here as well use in parent node for example "Microsoft".
		/// </summary>
		[DatabaseField]
		public string TechnologyName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyName"), @"");
			}
			set
			{
				SetValue("TechnologyName", value);
			}
		}


		/// <summary>
		/// Background display image.
		/// </summary>
		[DatabaseField]
		public string BackgroundImage
		{
			get
			{
				return ValidationHelper.GetString(GetValue("BackgroundImage"), @"");
			}
			set
			{
				SetValue("BackgroundImage", value);
			}
		}


		/// <summary>
		/// Background Alternative text.
		/// </summary>
		[DatabaseField]
		public string BackgroundImageAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("BackgroundImageAltText"), @"");
			}
			set
			{
				SetValue("BackgroundImageAltText", value);
			}
		}


		/// <summary>
		/// Technology logo.
		/// </summary>
		[DatabaseField]
		public string TechnologyLogo
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyLogo"), @"");
			}
			set
			{
				SetValue("TechnologyLogo", value);
			}
		}


		/// <summary>
		/// Content.
		/// </summary>
		[DatabaseField]
		public string ContentText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ContentText"), @"");
			}
			set
			{
				SetValue("ContentText", value);
			}
		}


		/// <summary>
		/// Active.
		/// </summary>
		[DatabaseField]
		public bool IsActive
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("IsActive"), true);
			}
			set
			{
				SetValue("IsActive", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with TechnologyDetails fields.
		/// </summary>
		[RegisterProperty]
		public TechnologyDetailsFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with TechnologyDetails fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class TechnologyDetailsFields : AbstractHierarchicalObject<TechnologyDetailsFields>
		{
			/// <summary>
			/// The content item of type TechnologyDetails that is a target of the extended API.
			/// </summary>
			private readonly TechnologyDetails mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="TechnologyDetailsFields" /> class with the specified content item of type TechnologyDetails.
			/// </summary>
			/// <param name="instance">The content item of type TechnologyDetails that is a target of the extended API.</param>
			public TechnologyDetailsFields(TechnologyDetails instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// Technologies_DSID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.TechnologyDetailsID;
				}
				set
				{
					mInstance.TechnologyDetailsID = value;
				}
			}


			/// <summary>
			/// Technology title.
			/// </summary>
			public string TechnologyTitle
			{
				get
				{
					return mInstance.TechnologyTitle;
				}
				set
				{
					mInstance.TechnologyTitle = value;
				}
			}


			/// <summary>
			/// Please enter same name here as well use in parent node for example "Microsoft".
			/// </summary>
			public string TechnologyName
			{
				get
				{
					return mInstance.TechnologyName;
				}
				set
				{
					mInstance.TechnologyName = value;
				}
			}


			/// <summary>
			/// Background display image.
			/// </summary>
			public string BackgroundImage
			{
				get
				{
					return mInstance.BackgroundImage;
				}
				set
				{
					mInstance.BackgroundImage = value;
				}
			}


			/// <summary>
			/// Background Alternative text.
			/// </summary>
			public string BackgroundImageAltText
			{
				get
				{
					return mInstance.BackgroundImageAltText;
				}
				set
				{
					mInstance.BackgroundImageAltText = value;
				}
			}


			/// <summary>
			/// Technology logo.
			/// </summary>
			public string TechnologyLogo
			{
				get
				{
					return mInstance.TechnologyLogo;
				}
				set
				{
					mInstance.TechnologyLogo = value;
				}
			}


			/// <summary>
			/// Content.
			/// </summary>
			public string ContentText
			{
				get
				{
					return mInstance.ContentText;
				}
				set
				{
					mInstance.ContentText = value;
				}
			}


			/// <summary>
			/// Active.
			/// </summary>
			public bool IsActive
			{
				get
				{
					return mInstance.IsActive;
				}
				set
				{
					mInstance.IsActive = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="TechnologyDetails" /> class.
		/// </summary>
		public TechnologyDetails() : base(CLASS_NAME)
		{
			mFields = new TechnologyDetailsFields(this);
		}

		#endregion
	}
}