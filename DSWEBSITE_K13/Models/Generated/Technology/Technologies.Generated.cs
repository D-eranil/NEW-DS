//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.DotStarK;

[assembly: RegisterDocumentType(Technologies.CLASS_NAME, typeof(Technologies))]

namespace CMS.DocumentEngine.Types.DotStarK
{
	/// <summary>
	/// Represents a content item of type Technologies.
	/// </summary>
	public partial class Technologies : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "DotStarK.Technologies";


		/// <summary>
		/// The instance of the class that provides extended API for working with Technologies fields.
		/// </summary>
		private readonly TechnologiesFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// Technologies_DSID.
		/// </summary>
		[DatabaseIDField]
		public int TechnologiesID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("TechnologiesID"), 0);
			}
			set
			{
				SetValue("TechnologiesID", value);
			}
		}


		/// <summary>
		/// Technology name.
		/// </summary>
		[DatabaseField]
		public string TechnologyName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyName"), @"");
			}
			set
			{
				SetValue("TechnologyName", value);
			}
		}


		/// <summary>
		/// Technology display image.
		/// </summary>
		[DatabaseField]
		public string TechnologyImage
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyImage"), @"");
			}
			set
			{
				SetValue("TechnologyImage", value);
			}
		}


		/// <summary>
		/// Alternative text.
		/// </summary>
		[DatabaseField]
		public string ImageAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageAltText"), @"");
			}
			set
			{
				SetValue("ImageAltText", value);
			}
		}


		/// <summary>
		/// Technology description .
		/// </summary>
		[DatabaseField]
		public string TechnologyDescription
		{
			get
			{
				return ValidationHelper.GetString(GetValue("TechnologyDescription"), @"");
			}
			set
			{
				SetValue("TechnologyDescription", value);
			}
		}


		/// <summary>
		/// Active.
		/// </summary>
		[DatabaseField]
		public bool IsActive
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("IsActive"), true);
			}
			set
			{
				SetValue("IsActive", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Technologies fields.
		/// </summary>
		[RegisterProperty]
		public TechnologiesFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Technologies fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class TechnologiesFields : AbstractHierarchicalObject<TechnologiesFields>
		{
			/// <summary>
			/// The content item of type Technologies that is a target of the extended API.
			/// </summary>
			private readonly Technologies mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="TechnologiesFields" /> class with the specified content item of type Technologies.
			/// </summary>
			/// <param name="instance">The content item of type Technologies that is a target of the extended API.</param>
			public TechnologiesFields(Technologies instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// Technologies_DSID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.TechnologiesID;
				}
				set
				{
					mInstance.TechnologiesID = value;
				}
			}


			/// <summary>
			/// Technology name.
			/// </summary>
			public string TechnologyName
			{
				get
				{
					return mInstance.TechnologyName;
				}
				set
				{
					mInstance.TechnologyName = value;
				}
			}


			/// <summary>
			/// Technology display image.
			/// </summary>
			public string TechnologyImage
			{
				get
				{
					return mInstance.TechnologyImage;
				}
				set
				{
					mInstance.TechnologyImage = value;
				}
			}


			/// <summary>
			/// Alternative text.
			/// </summary>
			public string ImageAltText
			{
				get
				{
					return mInstance.ImageAltText;
				}
				set
				{
					mInstance.ImageAltText = value;
				}
			}


			/// <summary>
			/// Technology description .
			/// </summary>
			public string TechnologyDescription
			{
				get
				{
					return mInstance.TechnologyDescription;
				}
				set
				{
					mInstance.TechnologyDescription = value;
				}
			}


			/// <summary>
			/// Active.
			/// </summary>
			public bool IsActive
			{
				get
				{
					return mInstance.IsActive;
				}
				set
				{
					mInstance.IsActive = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Technologies" /> class.
		/// </summary>
		public Technologies() : base(CLASS_NAME)
		{
			mFields = new TechnologiesFields(this);
		}

		#endregion
	}
}