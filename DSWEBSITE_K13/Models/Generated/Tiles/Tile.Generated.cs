//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.DotStarK;

[assembly: RegisterDocumentType(Tiles.CLASS_NAME, typeof(Tiles))]

namespace CMS.DocumentEngine.Types.DotStarK
{
	/// <summary>
	/// Represents a content item of type Tiles.
	/// </summary>
	public partial class Tiles : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "DotStarK.Tiles";


		/// <summary>
		/// The instance of the class that provides extended API for working with Tiles fields.
		/// </summary>
		private readonly TilesFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// TilesID.
		/// </summary>
		[DatabaseIDField]
		public int TilesID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("TilesID"), 0);
			}
			set
			{
				SetValue("TilesID", value);
			}
		}


		/// <summary>
		/// Name.
		/// </summary>
		[DatabaseField]
		public string Name
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Name"), @"");
			}
			set
			{
				SetValue("Name", value);
			}
		}


		/// <summary>
		/// Alternative text.
		/// </summary>
		[DatabaseField]
		public string ImageAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageAltText"), @"");
			}
			set
			{
				SetValue("ImageAltText", value);
			}
		}


		/// <summary>
		/// Image URL.
		/// </summary>
		[DatabaseField]
		public string ImageURL
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ImageURL"), @"");
			}
			set
			{
				SetValue("ImageURL", value);
			}
		}


		/// <summary>
		/// Themes color.
		/// </summary>
		[DatabaseField]
		public string ThemesColor
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ThemesColor"), @"");
			}
			set
			{
				SetValue("ThemesColor", value);
			}
		}


		/// <summary>
		/// Title.
		/// </summary>
		[DatabaseField]
		public string Title
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Title"), @"");
			}
			set
			{
				SetValue("Title", value);
			}
		}


		/// <summary>
		/// Content text.
		/// </summary>
		[DatabaseField]
		public string ContentText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ContentText"), @"");
			}
			set
			{
				SetValue("ContentText", value);
			}
		}


		/// <summary>
		/// Button text.
		/// </summary>
		[DatabaseField]
		public string ButtonText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ButtonText"), @"");
			}
			set
			{
				SetValue("ButtonText", value);
			}
		}


		/// <summary>
		/// Redirect URL.
		/// </summary>
		[DatabaseField]
		public string ButtonRedirectURL
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ButtonRedirectURL"), @"");
			}
			set
			{
				SetValue("ButtonRedirectURL", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Tiles fields.
		/// </summary>
		[RegisterProperty]
		public TilesFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Tiles fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class TilesFields : AbstractHierarchicalObject<TilesFields>
		{
			/// <summary>
			/// The content item of type Tiles that is a target of the extended API.
			/// </summary>
			private readonly Tiles mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="TilesFields" /> class with the specified content item of type Tiles.
			/// </summary>
			/// <param name="instance">The content item of type Tiles that is a target of the extended API.</param>
			public TilesFields(Tiles instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// TilesID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.TilesID;
				}
				set
				{
					mInstance.TilesID = value;
				}
			}


			/// <summary>
			/// Name.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.Name;
				}
				set
				{
					mInstance.Name = value;
				}
			}


			/// <summary>
			/// Alternative text.
			/// </summary>
			public string ImageAltText
			{
				get
				{
					return mInstance.ImageAltText;
				}
				set
				{
					mInstance.ImageAltText = value;
				}
			}


			/// <summary>
			/// Image URL.
			/// </summary>
			public string ImageURL
			{
				get
				{
					return mInstance.ImageURL;
				}
				set
				{
					mInstance.ImageURL = value;
				}
			}


			/// <summary>
			/// Themes color.
			/// </summary>
			public string ThemesColor
			{
				get
				{
					return mInstance.ThemesColor;
				}
				set
				{
					mInstance.ThemesColor = value;
				}
			}


			/// <summary>
			/// Title.
			/// </summary>
			public string Title
			{
				get
				{
					return mInstance.Title;
				}
				set
				{
					mInstance.Title = value;
				}
			}


			/// <summary>
			/// Content text.
			/// </summary>
			public string ContentText
			{
				get
				{
					return mInstance.ContentText;
				}
				set
				{
					mInstance.ContentText = value;
				}
			}


			/// <summary>
			/// Button text.
			/// </summary>
			public string ButtonText
			{
				get
				{
					return mInstance.ButtonText;
				}
				set
				{
					mInstance.ButtonText = value;
				}
			}


			/// <summary>
			/// Redirect URL.
			/// </summary>
			public string ButtonRedirectURL
			{
				get
				{
					return mInstance.ButtonRedirectURL;
				}
				set
				{
					mInstance.ButtonRedirectURL = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Tiles" /> class.
		/// </summary>
		public Tiles() : base(CLASS_NAME)
		{
			mFields = new TilesFields(this);
		}

		#endregion
	}
}